#!/usr/bin/perl -w
# Lookup MUF by station.  2-clause BSD license.

# Copyright 2018 /u/molo1134. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use Time::Piece ();

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;

my $url = 'ftp://ftp.swpc.noaa.gov/pub/lists/iono_day/';
my $stationMap = 'KML map: http://pastebin.com/Ni9tRV7N -- gmap: https://www.google.com/maps/d/viewer?mid=1tUa3CdSB6CVXYITH7cmF0Zmlu6fdt_wA';

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

  if ($username eq 'eggdrop') {
    print "usage: !muf <station>  --or--  !muf list (use /msg)\n";
  } else {
    print "usage: $0 <station>  --or--  $0 list\n";
  }
  exit 0
}

if ($ARGV[0] eq "list") {
  my $stations = "";
  open (FTP, '-|', "curl -s --max-time 4 --retry 1 $url | grep _iono | awk '{if (\$8 != 2012 && \$5 > 700) print \$9}' | sed -e 's/_iono.txt//'");

  binmode(FTP, ":utf8");
  while (<FTP>) {
    chomp;
    $stations .= $_ . " ";
  }

  print "$stations\n";
  print "$stationMap\n";

  exit 0;
}

my $place = join(' ', @ARGV);
$place=~tr/ /_/;
$place=~s/[^A-Za-z_]//g;
$place=~s/_([a-z])/_\U$1\E/g;
$place=~s/^([a-z])/\U$1\E/;
$place=~s/ElArensillo/ElArensillo/i;	# irregular case

$url = $url . $place . "_iono.txt";

open (FTP, '-|', "curl -s --max-time 4 --retry 1 $url");
binmode(FTP, ":utf8");

my ($y, $m, $d, $t, $fof2, $hmf2, $mufd, $D, $hF, $yF2, $fmuf, $h, $fxI, $foF1, $foE, $hmE, $foEs, $itec);
my ($issued, $ns, $ew, $lat, $lon, $grid, $hightime, $lowtime);

my ($muf, $lastmuf, $lasttime, $lastts);

my $high=0;
my $low=1000;

while (<FTP>) {
  if (/^:Issued: (.*)$/) {
    $issued = $1;
    next;
  }
  if (/^#.*([NS])([0-9]{2})([EW])0*([0-9]+)/) {
    $ns = $1;
    $lat = $2;
    $ew = $3;
    $lon = $4;

    if ($ns eq "S") {
      $lat = $lat * -1;
    }
    if ($ew eq "W") {
      $lon = $lon * -1;
    } elsif ($ew eq "E" and $lon > 180) {
      $lon = 360 - $lon;
      $lon = $lon * -1;
    }
    #print ("$lat, $lon\n");
    $grid = substr(coordToGrid($lat, $lon), 0, 4);
  }
  if (/^#/ or /^:Product/) {
    next;
  }
  if (/No data available/) {
    print "$place: $_";
    exit 0;
  }
  if (/[0-9]-[0-9]/) {
    next;
  }
  ($y, $m, $d, $t, $fof2, $hmf2, $mufd, $D, $hF, $yF2, $fmuf, $h, $fxI, $foF1, $foE, $hmE, $foEs, $itec) = split(/\s+/);

  if (defined($fof2) && $fof2 > 0 && defined($mufd) && $mufd > 0) {
    $muf = $fof2 * $mufd;
    $lastmuf = $muf;
    $lasttime = "$y-$m-$d ${t}z";
    $lastts = Time::Piece->strptime("$y-$m-$d $t", "%Y-%m-%d %H%M")->epoch;
    #print "lastts: $lasttime $lastts\n";

    if ($muf > $high) {
      $high = $muf;
      $hightime = $t;
    }
    if ($muf < $low) {
      $low = $muf;
      $lowtime = $t;
    }
  }
}

if (!defined($issued)) {
  print "Place \"$place\" not found.\n";
  exit 0;
}

#if (!defined($D) || $D == -1) {
#  $D = 3000;
#}

#if (!defined($h) || $h == -1) {
#  print "No observation.\n";
#  exit 0;
#}

if (!defined $lastmuf) {
#if (!defined($fof2) || $fof2 == -1 || !defined($mufd) || $mufd == -1) {
  print "$place: No recent observation / insufficient data.\n";
  exit 0;
}

#my $pi = 3.14159;
#my $theta = atan2(2 * $h, $D);
#my $phi = ($pi - (2 * $theta)) / 2;
#my $muf2 = $fmuf / cos($phi);
#my $muf3 = $fof2 / cos($phi);

#$muf = int($muf * 10) / 10;
#$muf2 = int($muf2 * 10) / 10;
#$muf3 = int($muf3 * 10) / 10;

#print "$place ($lat,$lon) MUF @ $y-$m-$d ${t}z: h:${h}km d:${D}km foF2:$fof2 fMUF:$fmuf calc1:$muf calc2:$muf2 calc3:$muf3\n";
my $old = "";
$old = yellow(" [old]") if $lastts < (time() - (30*60));  # 30 min
$old = red(" [old]") if $lastts < (time() - (120*60));    # 2 hour
print bold($place), " ($grid) MUF @ $lasttime$old: ", bold("$lastmuf MHz"), "; recent high: $high at ${hightime}z; low: $low at ${lowtime}z\n";

